<?php

/**
 * Data source plugin for easyLOD that generates FOAF XML from author
 * pages on Simon Fraser University's Institutional Repository, Summit
 * (http://summit.sfu.ca). 
 * 
 * This plugin uses the PHP Simple HTML DOM Parser library
 * (http://simplehtmldom.sourceforge.net/) to scrape data from author
 * pages like http://summit.sfu.ca/author/4. 
 *
 * Distributed under the MIT License, http://opensource.org/licenses/MIT.
 */

/**
 * Required function. Checks to see if a configuration for this plugin
 * exists in the $plugins array, and if not, returns the configuration
 * defined here.
 *
 * @param string $namespace
 *  The namespace portion of the request URI.
 *
 * @return
 *  An associative array containing this plugin's configuration data
 *  in key => value pairs.
 */
function dataSourceConfig($namespace) {
  // First check to see if this configration is being
  // overridden in plugins.php.
  global $plugins;
  if (array_key_exists($namespace, $plugins)) {
    return $plugins[$namespace]['dataSourceConfig'];
  }
  // If the configuration is not being overridden, use
  // this one.
  else {
    return array(
      'summit_base_url' => 'http://summit.sfu.ca',
      // Not distributed with this plugin; available at http://simplehtmldom.sourceforge.net/.
      'simple_html_dom_library_path' => '/home/mark/hacking/simple_html_dom/simple_html_dom.php',
    );
  }
}

/**
 * Required function. Defines the XML namespace that the elements
 * generated by this plugin belong to.
 *
 * @return
 *  An associative array containing the XML namespace prefix as a
 *  key and the namespace URI as its value.
 */
function getDataSourceNamespaces() {
  return array(
    'xmlns:foaf' => 'http://xmlns.com/foaf/0.1/',
    'xmlns:bio' => 'http://purl.org/vocab/bio/0.1/',
    'xmlns:dc' => 'http://purl.org/dc/elements/1.1/',
    'xmlns:owl' => 'http://www.w3.org/2002/07/owl#'
  );
}

/**
 * Required function. Defines the 'human-readable' web page for
 * an item.
 *
 * @param string $identifier
 *  The identifier portion of the request URI.
 *
 * @param object $app
 *  The Slim $app object.
 */
function getWebPage($identifier, $app) {
  list($namespace, $id) = explode(':', $identifier);
  $config = dataSourceConfig($namespace);
  $url = $config['summit_base_url']  . '/author/' . $id;
  $app->redirect($url, 303);
}

/**
 * Generate the RDF XML for the item.
 *
 * Data source plugins are required to define this function
 * unless they are returning full RDF documents; in that case,
 * they must define the getResourceDataRaw() function instead.
 * See the 'static' plugin for an example.
 *
 * @param string $identifier
 *  The identifier portion of the request URI.
 *
 * @param object $xml
 *  The SimpleXML $xml object.
 *
 * @param object $app
 *  The Slim $app object.
 *
 * @return
 *  The SimpleXML $xml object.
 */ 
function getResourceData($identifier, $xml, $app) {
  list($namespace, $id) = explode(':', $identifier);
  $config = dataSourceConfig($namespace);
  include $config['simple_html_dom_library_path'];
  // Find the record identified by $id and wrap its values
  // in faof:, dc:, and bio: namespaced XML markup.
  $summit_author_page_url = $config['summit_base_url']  . '/author/' . $id;
  if ($html = file_get_html($summit_author_page_url)) {
    // foaf:Person
    $xml->startElementNS('foaf', 'Person', null);

    // Please note: the HTML markup that is used to scrape information from http://summit.sfu.ca
    // is highly specific to that site. Please consult the documentation for the PHP Simple HTML
    // DOM Parser library for simpler examples.

    // foaf:familyName
    $last_name = $html->find('div[class=field-field-last-name] div[class=field-item odd]', 0)->plaintext;
    if (strlen(trim($last_name))) {
      $xml->writeElementNS('foaf', 'familyName', NULL, trim($last_name));
    }
    // foaf:givenName
    $first_name = $html->find('div[class=field-field-first-name] div[class=field-item odd]', 0)->plaintext;
    if (strlen(trim($first_name))) {
      $xml->writeElementNS('foaf', 'givenName', NULL, trim($first_name));
    }

    // foaf:homepage
    $website = $html->find('div[class=field-field-website] div[class=field-item odd]');
    if (isset($website[0]->plaintext)) {
      $xml->writeElementNS('foaf', 'homepage', NULL, trim($website[0]->plaintext));
    }

    // bio:olb (One Line Biography)
    $biography = $html->find('div[class=field-field-biography] div[class=field-item odd]');
    if (isset($biography[0]->plaintext)) {
      $biography_plain_text = strip_tags(trim($biography[0]->plaintext));
      // Strip all line returns.
      $biography_plain_text = str_replace(array("\r\n", "\n", "\r"), '', $biography_plain_text);
      $xml->writeElementNS('bio', 'olb', NULL, $biography_plain_text);
    }

    // foaf:picture
    $picture = $html->find('div[class=field-field-author-picture] div[class=field-item odd] img', 0);
    if (isset($picture->src)) {
      // Remove the cache info from the end of the src URL: http://summit.sfu.ca/system/files/pictures/mjonfive.jpg?1316019788
      $picture_src_clean = preg_replace('/\?\d+$/', '', trim($picture->src));
      $xml->startElementNS('foaf', 'Depiction', null);
      $xml->writeElementNS('foaf', 'picture', NULL, $picture_src_clean);
      $xml->endElement(); // Depiction
    }

    // foaf:publications
    $publications = array();
    $items_in_summit = $html->find('div[class=view-items-in-summit] table[class=views-table] tr');
    array_shift($items_in_summit);
    if (count($items_in_summit)) {
      $xml->startElementNS('foaf', 'publications', null);
      foreach ($items_in_summit as $row) {
        $xml->startElementNS('foaf', 'Document', null);
        $xml->writeElementNS('dc', 'title', NULL, trim($row->find('a', 0)->plaintext));
        $xml->writeElementNS('owl', 'sameAs', NULL, $config['summit_base_url'] . trim($row->find('a', 0)->href));
        $xml->endElement();
      }
      $xml->endElement(); // publications
    }

    $xml->endElement(); // Person
    return $xml;
  }
  else {
    $app->halt(404);
  }
}

