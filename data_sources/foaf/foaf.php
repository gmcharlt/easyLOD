<?php

/**
 * Data source plugin for easyLOD that generates FOAF XML from 
 * a CSV file.
 *
 * Distributed under the MIT License, http://opensource.org/licenses/MIT.
 */

/**
 * Required function. Checks to see if a configuration for this plugin
 * exists in the $plugins array, and if not, returns the configuration
 * defined here.
 *
 * @param string $namespace
 *  The namespace portion of the request URI.
 *
 * @return
 *  An associative array containing this plugin's configuration data
 *  in key => value pairs.
 */
function dataSourceConfig($namespace) {
  // First check to see if this configration is being
  // overridden in plugins.php.
  global $plugins;
  if (array_key_exists($namespace, $plugins)) {
    return $plugins[$namespace]['dataSourceConfig'];
  }
  // If the configuration is not being overridden, use
  // this one.
  else {
    return array(
      'input_file' => 'data_sources/foaf/people.csv',
    );
  }
}

/**
 * Required function. Defines the XML namespace that the elements
 * generated by this plugin belong to.
 *
 * @return
 *  An associative array containing the XML namespace prefix as a
 *  key and the namespace URI as its value.
 */
function getDataSourceNamespaces() {
  return array('xmlns:foaf' => 'http://xmlns.com/foaf/0.1/');
}

/**
 * Required function. Defines the 'human-readable' web page for
 * an item.
 *
 * @param string $identifier
 *  The identifier portion of the request URI.
 *
 * @param object $app
 *  The Slim $app object.
 */
function getWebPage($identifier, $app) {
  list($namespace, $id) = explode(':', $identifier);
  $config = dataSourceConfig($namespace);
  if ($record = getCsvRecord($namespace, $id)) {
    // The template we want to use is in the same directory
    // as this script.
    $app->config('templates.path', dirname(__FILE__));
    $app->render('csvtemplate.html', array('metadata' => $record));
  }
  else {
    $app->halt(404, 'Resource not found');
  }
}

/**
 * Generate the RDF XML for the item.
 *
 * Data source plugins are required to define this function
 * unless they are returning full RDF documents; in that case,
 * they must define the getResourceDataRaw() function instead.
 * See the 'static' plugin for an example.
 *
 * @param string $identifier
 *  The identifier portion of the request URI.
 *
 * @param object $xml
 *  The SimpleXML $xml object.
 *
 * @param object $app
 *  The Slim $app object.
 *
 * @return
 *  The SimpleXML $xml object.
 */ 
function getResourceData($identifier, $xml, $app) {
  list($namespace, $id) = explode(':', $identifier);
  $config = dataSourceConfig($namespace);
  // Find the record identified by $id and wrap its values
  // in faof: namespaced XML markup.
  if ($record = getCsvRecord($namespace, $id)) {
    $xml->startElementNS('foaf', 'Person', null);
    foreach ($record as $field => $value) {
      $xml->writeElementNS('foaf', $field, NULL, $value);
    }
    $xml->endElement(); 
    return $xml;
  }
  else {
    $app->halt(404);
  }
}

/**
 * Returns an associative array with field label => value
 * entries for the record with the value of $id in the 'Identifier'
 * (first) field. If there is more than one record with the
 * Identifier value of $id, the first matching one is returned.
 *
 * @param string $namespace
 *  The namespace portion of the request URI.
 *
 * @param string $id
 *  The ID portion of the request URI.
 *
 * @return
 *  An associative array containing field label => value
 *  entries for the record with the value of $id in the
 *  'Identifier (first) field.
 */
function getCsvRecord($namespace, $id) {
  $config = dataSourceConfig($namespace);
  $csv_records = file($config['input_file']);
  $field_names = array_shift($csv_records);
  $field_names = str_getcsv($field_names);
  // Loop through the lines in the file until we find the one
  // with the value of $id in its first column.
  foreach ($csv_records as $csv_record) {
    $field_values = str_getcsv($csv_record);
    // Identifier is the first field in the CSV data.
    if ($field_values[0] == $id) {
      return array_combine($field_names, $field_values);
    }
  }
  // If none match, return FALSE.
  return FALSE;
}

