<?php

/**
 * Data source plugin for easyLOD that generates XML for an item in
 * a MySQL database. The database has one table:
 *
 * +----+------------+--------------------------------------+----------------------+------+
 * | id | identifier | title                                | description          | date |
 * +----+------------+--------------------------------------+----------------------+------+
 * |  1 | 0002       | A Scanner Darkly                     | Don't do drugs.      | 1977 |
 * |  2 | 0003       | The Man in the High Castle           | Glad we won the war. | 1962 |
 * |  3 | 0001       | Do Androids Dream of Electric Sheep? | Lots of robots.      | 1968 |
 * +----+------------+--------------------------------------+----------------------+------+
 */

/**
 * Required function. 
 *
 * Defines configuration settings for this plugin.
 */
function dataSourceConfig() {
  return array(
    // Should be outside the webroot and readable by the web server.
    'config_file' => '/path/to/db_config.php'
  );
}

/**
 * Required function.
 *
 * Defines the XML namespace that the elements generated by this plugin belong to.
 */
function getDataSourceNamespaces() {
  return array('xmlns:dcterms' => 'http://purl.org/dc/terms/');
}

/**
 * Required function.
 *
 * Defines the 'human-readable' web page for an item.
 */
function getWebPage($identifier, $app) {
  // $config = dataSourceConfig();
  list($namespace, $id) = explode(':', $identifier);
  if ($record = getRecord($id)) {
    // Note: the template must be in Slim's 'templates' directory.
    $app->render('pdotemplate.html', array('metadata' => $record));
  }
  else {
    $app->halt(404, 'Resource not found');
  }
}

/**
 * Required function.
 *
 * Generate the RDF XML for the item.
 */ 
function getResourceData($identifier, $xml, $app) {
  list($namespace, $id) = explode(':', $identifier);
  if ($record = getRecord($id)) {
    // Wrap each of the record's values in dc: namespaced XML elements.
    foreach ($record as $field => $value) {
      $xml->writeElementNS('dc', strtolower($field), NULL, $value);
    }
    return $xml;
  }
  else {
    $app->halt(404);
  }
}

/**
 * Returns an associative array with field label => values
 * for the record with the value of $id in the 'Identifier'
 * field in the database table. Returns FALSE if no record
 * is found.
 */
function getRecord($id) {
  $config = dataSourceConfig();
  require $config['config_file'];

  $dbh = new PDO('mysql:host=localhost;dbname=' . $database, $username, $password);
  $query = $dbh->prepare("SELECT * FROM data WHERE identifier = ?");
  $query->execute(array($id));
  $rows = $query->fetchAll(PDO::FETCH_ASSOC);

  if (count($rows)) {
    // We don't want the record's 'id' field in the output, since it's just the 
    // database table key.
    unset($rows[0]['id']);
    // An extra trick: since the same author wrote all the books in our database, 
    // we can add this info here before returning the record. 
    $rows[0]['Author'] = 'Dick, Philip K.';
    return $rows[0];
  }
  else {
    return FALSE;
  }
}

